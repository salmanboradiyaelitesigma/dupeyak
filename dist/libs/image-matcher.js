class ImageMatcher{constructor(){this.cache=new Map,this.workers=[],this.processingQueue=[],this.isProcessing=!1}async processImage(t,e){if(this.cache.has(e))return this.cache.get(e);const a=document.createElement("canvas"),s=a.getContext("2d");let o;"string"==typeof t?(o=new Image,o.crossOrigin="anonymous",await new Promise((e,a)=>{o.onload=e,o.onerror=a,o.src=t})):o=t,a.width=o.width,a.height=o.height,s.drawImage(o,0,0);const n=s.getImageData(0,0,a.width,a.height),h={id:e,width:o.width,height:o.height,aspectRatio:o.width/o.height,fileSize:t.length||0,aHash:this.computeAverageHash(n),dHash:this.computeDifferenceHash(n),pHash:this.computePerceptualHash(n),colorHistogram:this.computeColorHistogram(n),dominantColors:this.extractDominantColors(n),edgeHash:this.computeEdgeHash(n),processedAt:Date.now()};return this.cache.set(e,h),h}computeAverageHash(t){const e=document.createElement("canvas"),a=e.getContext("2d");e.width=8,e.height=8,a.drawImage(this.imageDataToCanvas(t),0,0,8,8);const s=a.getImageData(0,0,8,8),o=[];for(let t=0;t<s.data.length;t+=4){const e=(s.data[t]+s.data[t+1]+s.data[t+2])/3;o.push(e)}const n=o.reduce((t,e)=>t+e)/o.length;let h="";for(let t=0;t<o.length;t++)h+=o[t]>n?"1":"0";return h}computeDifferenceHash(t){const e=document.createElement("canvas"),a=e.getContext("2d");e.width=9,e.height=8,a.drawImage(this.imageDataToCanvas(t),0,0,9,8);const s=a.getImageData(0,0,9,8),o=[];for(let t=0;t<s.data.length;t+=4){const e=(s.data[t]+s.data[t+1]+s.data[t+2])/3;o.push(e)}let n="";for(let t=0;t<8;t++)for(let e=0;e<8;e++)n+=o[9*t+e]>o[9*t+e+1]?"1":"0";return n}computePerceptualHash(t){const e=32,a=document.createElement("canvas"),s=a.getContext("2d");a.width=e,a.height=e,s.drawImage(this.imageDataToCanvas(t),0,0,e,e);const o=s.getImageData(0,0,e,e),n=[];for(let t=0;t<o.data.length;t+=4){const e=(o.data[t]+o.data[t+1]+o.data[t+2])/3;n.push(e)}const h=this.computeDCT(n,e),r=[];for(let t=0;t<8;t++)for(let a=0;a<8;a++)r.push(h[t*e+a]);const c=[...r].sort((t,e)=>t-e),i=c[Math.floor(c.length/2)];let l="";for(let t=0;t<r.length;t++)l+=r[t]>i?"1":"0";return l}computeDCT(t,e){const a=new Array(e*e).fill(0);for(let s=0;s<e;s++)for(let o=0;o<e;o++){let n=0;for(let a=0;a<e;a++)for(let h=0;h<e;h++)n+=t[a*e+h]*Math.cos((2*a+1)*s*Math.PI/(2*e))*Math.cos((2*h+1)*o*Math.PI/(2*e));const h=0===s?1/Math.sqrt(2):1,r=0===o?1/Math.sqrt(2):1;a[s*e+o]=1/4*h*r*n}return a}computeColorHistogram(t){const e=new Array(256).fill(0),a=new Array(256).fill(0),s=new Array(256).fill(0);for(let o=0;o<t.data.length;o+=4)e[t.data[o]]++,a[t.data[o+1]]++,s[t.data[o+2]]++;const o=t.data.length/4;return{r:e.map(t=>t/o),g:a.map(t=>t/o),b:s.map(t=>t/o)}}extractDominantColors(t,e=5){const a=[];for(let e=0;e<t.data.length;e+=40)a.push([t.data[e],t.data[e+1],t.data[e+2]]);if(0===a.length)return[];let s=[];for(let t=0;t<e;t++){const t=Math.floor(Math.random()*a.length);s.push([...a[t]])}for(let t=0;t<10;t++){const t=new Array(e).fill(null).map(()=>[]);for(const e of a){let a=1/0,o=0;for(let t=0;t<s.length;t++){const n=this.colorDistance(e,s[t]);n<a&&(a=n,o=t)}t[o].push(e)}for(let e=0;e<s.length;e++)if(t[e].length>0){const a=t[e].reduce((t,e)=>t+e[0],0)/t[e].length,o=t[e].reduce((t,e)=>t+e[1],0)/t[e].length,n=t[e].reduce((t,e)=>t+e[2],0)/t[e].length;s[e]=[a,o,n]}}return s.map(t=>({r:Math.round(t[0]),g:Math.round(t[1]),b:Math.round(t[2])}))}computeEdgeHash(t){const e=document.createElement("canvas"),a=e.getContext("2d");e.width=8,e.height=8,a.drawImage(this.imageDataToCanvas(t),0,0,8,8);const s=a.getImageData(0,0,8,8),o=[];for(let t=0;t<s.data.length;t+=4)o.push((s.data[t]+s.data[t+1]+s.data[t+2])/3);let n="";for(let t=0;t<7;t++)for(let e=0;e<7;e++){const a=o[8*t+e],s=o[8*t+e+1],h=o[8*(t+1)+e],r=Math.abs(a-s),c=Math.abs(a-h);n+=Math.sqrt(r*r+c*c)>30?"1":"0"}return n}imageDataToCanvas(t){const e=document.createElement("canvas"),a=e.getContext("2d");return e.width=t.width,e.height=t.height,a.putImageData(t,0,0),e}colorDistance(t,e){const a=t[0]-e[0],s=t[1]-e[1],o=t[2]-e[2];return Math.sqrt(a*a+s*s+o*o)}hammingDistance(t,e){if(t.length!==e.length)return 1/0;let a=0;for(let s=0;s<t.length;s++)t[s]!==e[s]&&a++;return a}compareHistograms(t,e){const a=["r","g","b"];let s=0;for(const o of a){const a=t[o],n=e[o],h=a.reduce((t,e)=>t+e)/a.length,r=n.reduce((t,e)=>t+e)/n.length;let c=0,i=0,l=0;for(let t=0;t<a.length;t++){const e=a[t]-h,s=n[t]-r;c+=e*s,i+=e*e,l+=s*s}const g=c/Math.sqrt(i*l);s+=isNaN(g)?0:g}return s/a.length}compareImages(t,e){const a=Math.max(t.aHash.length,t.dHash.length,t.pHash.length),s=1-this.hammingDistance(t.aHash,e.aHash)/a,o=1-this.hammingDistance(t.dHash,e.dHash)/a,n=1-this.hammingDistance(t.pHash,e.pHash)/a,h=1-this.hammingDistance(t.edgeHash,e.edgeHash)/t.edgeHash.length,r=this.compareHistograms(t.colorHistogram,e.colorHistogram),c=1-Math.abs(t.aspectRatio-e.aspectRatio)/Math.max(t.aspectRatio,e.aspectRatio),i=.2*s+.2*o+.3*n+.1*h+.15*r+.05*c;return{overall:Math.max(0,Math.min(1,i)),details:{aHash:s,dHash:o,pHash:n,edgeHash:h,histogram:r,aspectRatio:c}}}async findSimilarImages(t,e=.8,a=null){const s=[];for(let e=0;e<t.length;e++){a&&a({phase:"processing",current:e+1,total:t.length});const o=await this.processImage(t[e].src,t[e].id);s.push(o)}const o=[],n=new Set;for(let t=0;t<s.length;t++){if(n.has(s[t].id))continue;const h=[s[t]];n.add(s[t].id);for(let a=t+1;a<s.length;a++)n.has(s[a].id)||this.compareImages(s[t],s[a]).overall>=e&&(h.push(s[a]),n.add(s[a].id));h.length>1&&o.push({images:h,count:h.length,averageSimilarity:this.calculateGroupSimilarity(h)}),a&&a({phase:"comparing",current:t+1,total:s.length})}return o.sort((t,e)=>e.count-t.count)}calculateGroupSimilarity(t){if(t.length<2)return 1;let e=0,a=0;for(let s=0;s<t.length;s++)for(let o=s+1;o<t.length;o++)e+=this.compareImages(t[s],t[o]).overall,a++;return a>0?e/a:1}clearCache(){this.cache.clear()}getStats(){return{cachedImages:this.cache.size,memoryUsage:this.estimateMemoryUsage()}}estimateMemoryUsage(){let t=0;for(const[e,a]of this.cache)t+=JSON.stringify(a).length;return t}}"undefined"!=typeof module&&module.exports?module.exports=ImageMatcher:"undefined"!=typeof window&&(window.ImageMatcher=ImageMatcher);