(()=>{"use strict";var e={86:(e,t,o)=>{o.d(t,{A:()=>s}),console.log("✅ oauth-helper.js loaded");const s=class{constructor(){this.apiBaseUrl="https://api.gpdrm.com",this.pollInterval=1e3,this.maxPollAttempts=300}async startAuthFlow(){try{console.log("🔐 Starting OAuth flow with polling approach...");const e=await fetch(`${this.apiBaseUrl}/oauth/create-session`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({extensionId:chrome.runtime.id})});if(!e.ok)throw new Error("Failed to create OAuth session");const{sessionId:t,authUrl:o}=await e.json();console.log("📝 OAuth session created:",t),chrome.tabs.create({url:o});const s=await this.pollForAuthResult(t);if(s.success)return console.log("✅ OAuth completed successfully"),await this.handleOAuthSuccess(s.userInfo);throw new Error(s.error||"OAuth failed")}catch(e){throw console.error("❌ OAuth flow failed:",e),e}}async pollForAuthResult(e){console.log("🔄 Starting to poll for OAuth results...");for(let t=0;t<this.maxPollAttempts;t++)try{const o=await fetch(`${this.apiBaseUrl}/oauth/check-session`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({sessionId:e,extensionId:chrome.runtime.id})});if(!o.ok){console.warn("Poll request failed, retrying..."),await this.sleep(this.pollInterval);continue}const s=await o.json();if("completed"===s.status)return console.log("🎉 OAuth completed!"),{success:!0,userInfo:s.userInfo};if("error"===s.status)return{success:!1,error:s.error};if("pending"===s.status){console.log(`⏳ Polling attempt ${t+1}/${this.maxPollAttempts}...`),await this.sleep(this.pollInterval);continue}throw new Error("Unknown session status: "+s.status)}catch(e){console.warn("Poll attempt failed:",e),await this.sleep(this.pollInterval)}return{success:!1,error:"OAuth timeout - please try again"}}async handleOAuthSuccess(e){try{console.log("🔄 Processing OAuth success..."),await new Promise(t=>{chrome.storage.local.set({userEmail:e.email,userId:e.id,authTimestamp:Date.now()},t)}),console.log("✅ User info stored:",e.email);try{chrome.runtime.sendMessage({action:"authenticationComplete",userInfo:e})}catch(e){}return{success:!0,userInfo:e}}catch(e){throw console.error("❌ Failed to handle OAuth success:",e),e}}async getUserInfo(){return new Promise(e=>{chrome.storage.local.get(["userEmail","userId","authTimestamp"],t=>{t.userEmail&&t.userId?e({email:t.userEmail,id:t.userId,timestamp:t.authTimestamp}):e(null)})})}async isAuthenticated(){return null!==await this.getUserInfo()}async signOut(){try{return console.log("🚪 Signing out user..."),await new Promise(e=>{chrome.storage.local.remove(["userEmail","userId","authTimestamp"],e)}),console.log("✅ User signed out successfully"),{success:!0}}catch(e){throw console.error("❌ Sign out failed:",e),e}}sleep(e){return new Promise(t=>setTimeout(t,e))}}}},t={};function o(s){var a=t[s];if(void 0!==a)return a.exports;var r=t[s]={exports:{}};return e[s](r,r.exports,o),r.exports}o.d=(e,t)=>{for(var s in t)o.o(t,s)&&!o.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var s=o(86);console.log,console.warn,console.error,console.info,console.debug,console.log=function(){},console.info=function(){},console.debug=function(){},new class{constructor(){this.oauthHelper=new s.A,this.init()}init(){this.setupEventListeners(),console.log("Google Photos Duplicate Remover - Background Service Started")}setupEventListeners(){chrome.action.onClicked.addListener(async e=>{const t=await chrome.tabs.create({url:chrome.runtime.getURL("html/extension-page.html"),active:!0});t&&t.windowId&&await chrome.windows.update(t.windowId,{focused:!0})}),chrome.runtime.onInstalled.addListener(e=>{this.handleInstallation(e)}),chrome.tabs.onUpdated.addListener((e,t,o)=>{this.handleTabUpdate(e,t,o)}),chrome.runtime.onMessage.addListener((e,t,o)=>(this.handleMessage(e,t,o),!0)),chrome.runtime.onMessageExternal.addListener((e,t,o)=>(this.handleExternalMessage(e,t,o),!0))}handleInstallation(e){"install"===e.reason&&(console.log("Extension installed for the first time"),chrome.storage.local.set({serverUrl:"http://localhost:8095",similarityThreshold:85,installDate:Date.now()}),chrome.tabs.create({url:"https://photos.google.com"}))}handleTabUpdate(e,t,o){"complete"===t.status&&(o.url&&o.url.includes("photos.google.com")?this.updateIconForGooglePhotos(e,o.url):this.updateIconDefault(e))}updateIconForGooglePhotos(e,t){chrome.action.setBadgeText({tabId:e,text:"●"}),chrome.action.setBadgeBackgroundColor({tabId:e,color:"#4285f4"}),t.includes("/search/")||t.match(/\/u\/\d+\/search\//)?chrome.action.setTitle({tabId:e,title:"Google Photos Duplicate Remover - Search page detected!"}):chrome.action.setTitle({tabId:e,title:"Google Photos Duplicate Remover - Navigate to search to find duplicates"})}updateIconDefault(e){chrome.action.setBadgeText({tabId:e,text:""}),chrome.action.setTitle({tabId:e,title:"Google Photos Duplicate Remover - Go to Google Photos to start"})}async handleMessage(e,t,o){try{switch(e.action){case"logAnalysis":await this.logAnalysisResult(e.results),o({success:!0});break;case"capturePhoto":await this.handlePhotoCapture(e,t,o);break;case"openPopup":await this.openExtensionPopup(),o({success:!0});break;case"downloadInvoice":await this.handleDownloadInvoice(e,o);break;case"startOAuth":await this.handleStartOAuth(e,o);break;case"handleOAuthSuccess":await this.handleOAuthSuccess(e,o);break;case"getUserInfo":await this.handleGetUserInfo(e,o);break;case"signOut":await this.handleSignOut(e,o);break;case"verifyOAuthSignature":await this.handleVerifyOAuthSignature(e,o);break;case"authenticate":await this.handleAuthenticate(e,o);break;case"generateAuthHash":await this.handleGenerateAuthHash(e,o);break;case"openExtensionPage":await this.handleOpenExtensionPage(e,o);break;default:o({success:!1,error:"Unknown action"})}}catch(e){console.error("Error handling message:",e),o({success:!1,error:e.message})}}async handleExternalMessage(e,t,o){try{switch(console.log("📨 External message received:",e),e.action){case"oauthSuccess":await this.handleOAuthSuccess(e,o);break;case"oauthError":console.error("❌ OAuth error from API worker:",e.error),o({success:!1,error:e.error});break;default:o({success:!1,error:"Unknown external action"})}}catch(e){console.error("Error handling external message:",e),o({success:!1,error:e.message})}}async openExtensionPopup(){try{const[e]=await chrome.tabs.query({active:!0,currentWindow:!0});if(!e)throw new Error("No active tab found");await chrome.action.openPopup(),console.log("✅ Extension popup opened")}catch(e){throw console.warn("⚠️ Could not open popup:",e),e}}async handleOpenExtensionPage(e,t){try{console.log("🛒 Opening extension page for purchase...");const e=await chrome.tabs.create({url:chrome.runtime.getURL("/html/extension-page.html"),active:!0});if(!(e&&e.id&&e.windowId))throw new Error("Failed to create tab");await chrome.windows.update(e.windowId,{focused:!0}),console.log("✅ Extension page opened and window focused successfully"),t({success:!0,tabId:e.id})}catch(e){console.error("❌ Failed to open extension page:",e),t({success:!1,error:e.message})}}async handleDownloadInvoice(e,t){try{console.log("📄 Getting Google auth data for invoice download...");const o=await this.oauthHelper.getUserInfo();if(!o)return void t({success:!1,error:"User not authenticated"});const s=o.email,a=o.id;if(!s||!a)return void t({success:!1,error:"Could not get user information"});const r=await this.generateAuthHash(a,e.extensionId);console.log("✅ Auth data retrieved for invoice download:",s,"ID:",a),t({success:!0,authData:{accountId:a,email:s,authHash:r,extensionId:e.extensionId}})}catch(e){console.error("❌ Error handling invoice download request:",e),t({success:!1,error:e.message||"Authentication failed"})}}async handleGenerateAuthHash(e,t){try{const{accountId:o,extensionId:s}=e;if(!o||!s)throw new Error("Missing accountId or extensionId");t({success:!0,authHash:await this.generateAuthHash(o,s)})}catch(e){console.error("❌ Failed to generate auth hash:",e),t({success:!1,error:e.message})}}async generateAuthHash(e,t){const o=t+e,s=(new TextEncoder).encode(o),a=await crypto.subtle.digest("SHA-1",s);return Array.from(new Uint8Array(a)).map(e=>e.toString(16).padStart(2,"0")).join("")}async logAnalysisResult(e){try{const t=Date.now();await chrome.storage.local.set({analysisResults:e,timestamp:t}),console.log("Analysis result logged:",{totalImages:e.total_images,similarGroups:e.similar_groups.length,timestamp:new Date(t).toISOString()})}catch(e){console.error("Error logging analysis result:",e)}}async handlePhotoCapture(e,t,o){try{console.log("Background: Capturing temp image screenshot for:",e.photoId);let s=null;if(e.elementId&&(s=await this.getTempElementInfo(e.elementId,t.tab.id),!s))return void o({success:!1,error:"Could not locate temp element"});const a=await chrome.tabs.captureVisibleTab(t.tab.windowId,{format:"jpeg",quality:85});let r=a;s&&(r=await this.cropImageToElement(a,s)),o({success:!0,imageData:r,width:s?s.width:1024,height:s?s.height:768,photoId:e.photoId})}catch(e){console.error("Background: Screenshot capture failed:",e),o({success:!1,error:e.message})}}async getTempElementInfo(e,t){return new Promise(o=>{chrome.tabs.sendMessage(t,{action:"getTempElementInfo",elementId:e},e=>{o(e)})})}async cropImageToElement(e,t){try{const o=await fetch(e),s=await o.blob(),a=await createImageBitmap(s),r=new OffscreenCanvas(t.width,t.height);r.getContext("2d").drawImage(a,t.x,t.y,t.width,t.height,0,0,t.width,t.height);const n=await r.convertToBlob({type:"image/jpeg",quality:.85});return new Promise((e,t)=>{const o=new FileReader;o.onloadend=()=>e(o.result),o.onerror=t,o.readAsDataURL(n)})}catch(e){throw console.error("Error cropping image:",e),e}}async handleAuthenticate(e,t){try{console.log("🔐 Starting authentication flow from extension page..."),t(await this.oauthHelper.startAuthFlow())}catch(e){console.error("❌ Failed to start authentication flow:",e),t({success:!1,error:e.message})}}async handleStartOAuth(e,t){try{console.log("🔐 Starting OAuth flow from background..."),t(await this.oauthHelper.startAuthFlow())}catch(e){console.error("❌ Failed to start OAuth flow:",e),t({success:!1,error:e.message})}}async handleOAuthSuccess(e,t){try{console.log("🔄 Handling OAuth success in background..."),t(await this.oauthHelper.handleOAuthSuccess(e.userInfo))}catch(e){console.error("❌ OAuth success handling failed:",e),t({success:!1,error:e.message})}}async handleGetUserInfo(e,t){try{t({success:!0,userInfo:await this.oauthHelper.getUserInfo(),isAuthenticated:await this.oauthHelper.isAuthenticated()})}catch(e){console.error("❌ Failed to get user info:",e),t({success:!1,error:e.message})}}async handleSignOut(e,t){try{console.log("🚪 Signing out user..."),t(await this.oauthHelper.signOut())}catch(e){console.error("❌ Sign out failed:",e),t({success:!1,error:e.message})}}async handleVerifyOAuthSignature(e,t){try{console.log("🔐 Verifying OAuth signature...");const{email:o,id:s,timestamp:a,signature:r}=e,n=`${o}:${s}:${a}`;if(r!==await this.generateSignature(n))throw new Error("Invalid signature - authentication data may have been tampered with");const i={email:o,id:s},c=await this.oauthHelper.handleOAuthSuccess(i);console.log("✅ OAuth signature verified and user data stored"),t(c)}catch(e){console.error("❌ OAuth signature verification failed:",e),t({success:!1,error:e.message})}}async generateSignature(e){const t=`${chrome.runtime.id}:333200186065-sedmupk2gh8vkve4c8673su04vhqfnc0.apps.googleusercontent.com`,o=new TextEncoder,s=o.encode(t),a=o.encode(e),r=await crypto.subtle.importKey("raw",s,{name:"HMAC",hash:"SHA-256"},!1,["sign"]),n=await crypto.subtle.sign("HMAC",r,a);return Array.from(new Uint8Array(n)).map(e=>e.toString(16).padStart(2,"0")).join("")}}})();